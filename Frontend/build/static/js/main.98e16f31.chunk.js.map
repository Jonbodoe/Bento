{"version":3,"sources":["logo.svg","Components/Navigation.js","Pages/Youtube.js","Pages/Twitch.js","Pages/Twitter.js","Components/MediaWidgets.js","Pages/IndexPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","Youtube","Twitch","Twitter","withRouter","dataList","title","icon","link","JSX","hover","widgets","map","data","to","widgetRoutes","route","exact","path","IndexPage","props","children","App","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,4HCU5BC,EARI,WACf,OACI,yBAAKC,UAAU,mBACX,wBAAIA,UAAU,oBAAd,SACA,wBAAIA,UAAU,kBAAd,gCCAGC,EAJC,WACZ,OAAO,wCCGIC,EAJA,WACX,OAAO,uCCGIC,EAJC,WACZ,OAAO,wC,OC6DIC,eApDM,WACjB,IAAIC,EAAW,CACX,CACIC,MAAO,SACPC,KAAM,YACNC,KAAM,UACNC,IAAK,kBAAC,EAAD,MACLC,MAAO,aAEX,CACIJ,MAAO,UACPC,KAAM,aACNC,KAAM,WACNC,IAAK,kBAAC,EAAD,MACLC,MAAO,cAEX,CACIJ,MAAO,UACPC,KAAM,aACNC,KAAM,WACNC,IAAK,kBAAC,EAAD,MACLC,MAAO,eAGTC,EAAUN,EAASO,KAAI,SAACC,GAAD,OACzB,yBAAKb,UAAU,YACX,kBAAC,IAAD,CAAMc,GAAID,EAAKL,MACf,yBAAKR,UAAU,oCACX,uBAAGA,UAAS,cAASa,EAAKN,KAAd,gBACZ,wBAAIP,UAAU,yBAAyBa,EAAKP,aAKlDS,EAAeV,EAASO,KAAI,SAACI,GAAD,OAC9B,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMF,EAAMR,MACpBQ,EAAMP,QAGf,OACI,yBAAKT,UAAU,sCAEPW,EAEJ,kBAAC,IAAD,KAEQI,OC7CLI,EAXG,SAACC,GACf,OACI,6BAASpB,UAAU,OACf,yBAAKA,UAAU,aAEPoB,EAAMC,YCwBXC,MAlBf,WACE,OACE,kBAAC,IAAD,CAAOC,OAAQ,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAON,OAAK,EAACC,KAAK,KAEhB,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,aCTQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOZ,KAAK,IAAIa,UAAWT,MAG/BU,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.98e16f31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Navigation = () => {\n    return (\n        <nav className=\"py-4 text-right\">\n            <h1 className=\"font-weight-bold\">Bento</h1>\n            <h3 className=\"text-secondary\">For all your needs, Pat...</h3>\n        </nav>\n    )\n}\nexport default Navigation","import React from 'react';\n\nconst Youtube = () => {\n    return <h1>YOUTUBE</h1>\n}\n\nexport default Youtube","import React from 'react';\n\nconst Twitch = () => {\n    return <h1>Twitch</h1>\n}\n\nexport default Twitch","import React from 'react';\n\nconst Twitter = () => {\n    return <h1>Twitter</h1>\n}\n\nexport default Twitter","import React from 'react';\nimport Youtube from '../Pages/Youtube';\nimport Twitch from '../Pages/Twitch';\nimport Twitter from '../Pages/Twitter';\nimport {\n    Switch,\n    Route,\n    withRouter,\n    Link\n  } from \"react-router-dom\";\n\n\nconst MediaWidgets = () => {\n    let dataList = [\n        {\n            title: \"Twitch\",\n            icon: \"fa-twitch\",\n            link: \"/twitch\",\n            JSX: <Twitch/>,\n            hover: \"bg-twitch\",\n        },\n        {\n            title: \"Youtube\",\n            icon: \"fa-youtube\",\n            link: \"/youtube\",\n            JSX: <Youtube/>,\n            hover: \"bg-youtube\",\n        },\n        {\n            title: \"Twitter\",\n            icon: \"fa-twitter\",\n            link: \"/twitter\",\n            JSX: <Twitter/>,\n            hover: \"bg-twitter\",\n        },\n    ]\n    const widgets = dataList.map((data) => (             \n        <div className=\"col-sm-4\">\n            <Link to={data.link}>\n            <div className=\"text-center shadow p-5 text-dark\">\n                <i className={`fab ${data.icon} icon-logo`}></i>\n                <h4 className=\"font-weight-bold pt-5\">{data.title}</h4>\n            </div>\n            </Link>\n        </div>\n    ))\n    const widgetRoutes = dataList.map((route) => (\n        <Route exact path={route.link}>\n            {route.JSX}\n        </Route>\n    ))\n    return (\n        <div className=\"row d-flex justify-content-between\">\n            {\n                widgets\n            }\n            <Switch>\n                {\n                    widgetRoutes\n                }\n            </Switch>\n        </div>\n    )\n}\nexport default withRouter(MediaWidgets)","import React from 'react'\n\nconst IndexPage = (props) => {\n    return (\n        <section className=\"p-5\">\n            <div className=\"container\">\n                {\n                    props.children\n                }\n            </div>\n        </section>\n    )\n}\nexport default IndexPage","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  Switch,\n  Route,\n  // withRouter,\n  // Link\n} from \"react-router-dom\";\nimport Navigation from './Components/Navigation';\nimport MediaWidgets from './Components/MediaWidgets';\nimport IndexPage from './Pages/IndexPage';\n\nfunction App() {\n  return (\n    <Route render={() => (\n      <Switch>\n        <Route exact path=\"/\">\n          {/* Look into if issue. */}\n          <IndexPage>\n            <Navigation />\n            <MediaWidgets />\n          </IndexPage>\n        </Route> \n      </Switch>\n    )}\n    />\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter, Route } from 'react-router-dom'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Route path=\"/\" component={App}/>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}